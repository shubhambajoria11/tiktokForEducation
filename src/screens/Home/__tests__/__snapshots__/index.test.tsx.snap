// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render Home Screen should match with the snapshot 1`] = `
<View
  style={
    {
      "backgroundColor": "#00425A",
      "flexBasis": 0,
      "flexGrow": 1,
      "flexShrink": 1,
    }
  }
>
  <View
    style={
      {
        "backgroundColor": "#000000",
        "flexDirection": "row",
        "justifyContent": "space-between",
      }
    }
  >
    <View
      style={
        {
          "flexDirection": "row",
          "marginBottom": 18.5,
          "marginLeft": 18.5,
          "marginRight": 18.5,
          "marginTop": 18.5,
        }
      }
    >
      <
        fillOpacity={0.5}
        height={16}
        strokeWidth={1.5}
        width={20}
      />
      <Text
        style={
          {
            "color": "#ffffff",
            "marginLeft": 6,
            "opacity": 0.6,
          }
        }
      >
        0
        :
        1
      </Text>
    </View>
    <View
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
    >
      <View
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "opacity": 1,
          }
        }
      >
        <Text
          activeFlashCard="Following"
          style={
            {
              "color": "#ffffff",
              "fontWeight": "700",
              "opacity": 1,
            }
          }
        >
          Following
        </Text>
      </View>
      <View
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "opacity": 1,
          }
        }
      >
        <Text
          activeFlashCard="Following"
          style={
            {
              "color": "#ffffff",
              "fontWeight": "300",
              "marginLeft": 40,
              "opacity": 0.6,
            }
          }
        >
          For You
        </Text>
      </View>
    </View>
    <View
      style={
        {
          "alignItems": "center",
          "justifyContent": "center",
          "marginRight": 40,
        }
      }
    >
      <
        fillOpacity={0.5}
        height={16}
        strokeWidth={1.5}
        width={20}
      />
    </View>
  </View>
  <RCTScrollView
    data={[]}
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={0.1}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View />
  </RCTScrollView>
</View>
`;
